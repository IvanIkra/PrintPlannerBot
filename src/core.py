import asyncio
import logging
import os
import tempfile
from datetime import date, datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command, Message, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

import pandas as pd

import src.root.keyboards as kb
from src.root.fsm_order import (
    Ord, ord_1, ord_2, ord_3, ord_4, ord_5, ord_6, ord_7, ord_8, 
    get_order_data, create_order_in_db  # –î–æ–±–∞–≤–ª—è–µ–º create_order_in_db –≤ –∏–º–ø–æ—Ä—Ç
)

from data.config_reader import config
from data.db_manage import *
from data.db_manage import DatabaseManager


log_file = 'data/logs/bot.log'
with open(log_file, 'w', encoding='utf-8') as f:
    f.write('')

log_dir = os.path.join('data', 'logs')
os.makedirs(log_dir, exist_ok=True)
log_file = os.path.join(log_dir, 'bot.log')
with open(log_file, 'w', encoding='utf-8') as f:
    f.write('')

logging.basicConfig(level=logging.INFO,
                   format='%(asctime)s - %(levelname)s - %(message)s',
                   handlers=[logging.FileHandler(log_file, encoding='utf-8'),
                           logging.StreamHandler()])

data_dir = os.path.join('data')
db_dir = os.path.join(data_dir, 'db')

os.makedirs(db_dir, exist_ok=True)

bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()


class Ord(StatesGroup):
    name = State()
    link = State()
    material = State()
    material_amount = State()
    recommended_date = State()
    importance = State()
    settings = State()


class Payment(StatesGroup):
    summ = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        image = types.FSInputFile("data/images/printplanner.webp")
        await message.answer_photo(
            photo=image,
            caption="üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Binary Brigade."
        )
    except FileNotFoundError:
        await message.answer(
            "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Binary Brigade."
        )
    await message.answer(
        "*‚Üì–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é‚Üì*",
        reply_markup=kb.keyboard_inline2,
        parse_mode="Markdown"
    )

@dp.message(Command("menu"))
async def menu(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ 3D –ø–µ—á–∞—Ç–∏!\
 –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –º–µ–Ω—é.', reply_markup=kb.keyboard_inline_main_menu)

@dp.callback_query(F.data == 'make_order')
async def make_order(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await callback.message.delete()
    # –ó–∞–ø—É—Å–∫–∞–µ–º FSM
    await ord_1(callback, state)

@dp.message(Ord.name)
async def handle_name(message: Message, state: FSMContext):
    await ord_2(message, state)

@dp.message(Ord.link)
async def handle_link(message: Message, state: FSMContext):
    await ord_3(message, state)

@dp.message(Ord.material)
async def handle_material(message: Message, state: FSMContext):
    await ord_4(message, state)

@dp.message(Ord.material_amount)
async def handle_material_amount(message: Message, state: FSMContext):
    await ord_5(message, state)

@dp.message(Ord.recommended_date)
async def handle_date(message: Message, state: FSMContext):
    await ord_6(message, state)

@dp.message(Ord.importance)
async def handle_importance(message: Message, state: FSMContext):
    await ord_7(message, state)

@dp.message(Ord.settings)
async def handle_settings(message: Message, state: FSMContext):
    await ord_8(message, state)

@dp.callback_query(F.data == 'yes_makeorder')
async def yes_makeorder(callback: CallbackQuery, state: FSMContext):
    data = await get_order_data(state)
    
    # –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    recommended_cost = data["material_amount"] * 7  # 7 —Ä—É–±–ª–µ–π –∑–∞ –≥—Ä–∞–º–º
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_data=data, recommended_cost=recommended_cost)
    
    await callback.answer("–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    await callback.message.edit_text(
        f'–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å *{recommended_cost}* —Ä—É–±',
        reply_markup=kb.keyboard_inline8,
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == 'our_price_makeorder')
async def our_price_makeorder(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        data = state_data["order_data"]
        recommended_cost = state_data["recommended_cost"]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        user_id = callback.from_user.id
        data["cost"] = recommended_cost
        order_id = await create_order_in_db(user_id, data)
        
        if order_id == -1:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=kb.keyboard_inline7
            )
            return
        
        await callback.answer("–ì–æ—Ç–æ–≤–æ")
        await callback.message.edit_text(
            f'–ó–∞–∫–∞–∑ *{data["name"]}* —Å–æ–∑–¥–∞–Ω!\nID –∑–∞–∫–∞–∑–∞: *{order_id}*\n–°—Ç–æ–∏–º–æ—Å—Ç—å: *{recommended_cost}* —Ä—É–±',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[kb.backmenu_button]]),
            parse_mode="Markdown"
        )
        await state.clear()
        
    except Exception as e:
        print(f"Error in our_price_makeorder: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[kb.backmenu_button]])
        )

@dp.message(Payment.summ)
async def handle_custom_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        user_id = message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        data = state_data["order_data"]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        data["cost"] = price
        order_id = await create_order_in_db(user_id, data)
        
        if order_id == -1:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[kb.backmenu_button]])
            )
            await state.clear()
            return
        
        await state.clear()
        await message.answer(
            f'–ó–∞–∫–∞–∑ *{data["name"]}* —Å–æ–∑–¥–∞–Ω!\nID –∑–∞–∫–∞–∑–∞: *{order_id}*\n–°—Ç–æ–∏–º–æ—Å—Ç—å: *{price}* —Ä—É–±',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[kb.backmenu_button]]),
            parse_mode="Markdown"
        )
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[kb.cancel_button]])
        )

@dp.callback_query(F.data == 'custom_price_makeorder')
async def custom_price_makeorder(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    await state.set_state(Payment.summ)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[kb.cancel_button]])
    )

@dp.callback_query(F.data == "cancel_price")
async def cancel_price(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[kb.backmenu_button]])
    )

# @dp.message(Command("help"))
# async def cmd_help(message: types.Message):
#     await message.answer("/help - —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
#                          "/newoder <–∏–º—è –∑–∞–∫–∞–∑–∞>@<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª>@<–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞\
#                          –≤ –≥—Ä–∞–º–º–∞—Ö>@<–¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è>@<—Å—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10>@<–Ω–∞—Å—Ç—Ä–æ–π–∫–∏> - –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
#                          "–ü—Ä–∏–º–µ—Ä: /newoder –ó–∞–∫–∞–∑ 1@https://github.com/IvanIkra/PrintPlannerBot@–ü–õ–ê\
#                          @100@16-01-2025@10@—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ\n\n"
#                          "/matupdateadd <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞> - –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª\n\n"
#                          "/matupdatesub <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª\n\n"
#                          "/addexp <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>@<—Å—É–º–º–∞>@<–Ω–∞–∑–≤–∞–Ω–∏–µ> - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n\n"
#                          "/getmats - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n"
#                          "/oder <id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∫–∑–µ –ø–æ –µ–≥–æ id\n\n"
#                          "/paymenturl <—Å—É–º–º–∞> - —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É")
#
#
# @dp.message(Command("newoder"))
# async def cmd_newoder(
#         message: Message,
#         command: CommandObject
# ):
#     if command.args is None:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
#         )
#         return
#     try:
#         name, link, matrial, material_amount, recommended_date, importance, settings = command.args.split("@")
#         importance = int(importance)
#         material_amount = int(material_amount)
#         cost = material_amount * 7
#     except Exception as e:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
#             "/newoder <–∏–º—è –∑–∞–∫–∞–∑–∞>@<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª>@<–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>\
#             @<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è>@<—Å—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10>@<–Ω–∞—Å—Ç—Ä–æ–π–∫–∏>"
#         )
#         print(e)
#         return
#     mat = update_material(conn, matrial, material_amount, 'subtract')
#     if mat == '–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è.':
#         await message.answer(mat)
#         return
#     id = add_order(conn, name, link, matrial, material_amount, recommended_date, importance, settings, cost, True,
#                    False, date.today())
#     add_revenue(conn, name, material_amount, date.today())
#
#     await message.answer(id + f'\n–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {cost}' + f'\n{mat}')
#
#
# @dp.message(Command("matupdateadd"))
# async def cmd_matupdateadd(
#         message: Message,
#         command: CommandObject
# ):
#     if command.args is None:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
#         )
#         return
#     try:
#         material, material_amount = command.args.split("@")
#         material_amount = int(material_amount)
#     except Exception as e:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
#             "/matupdateadd <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>"
#         )
#         print(e)
#         return
#
#     await message.answer(update_material(conn, material, material_amount, 'add'))
#
#
# @dp.message(Command("matupdatesub"))
# async def cmd_matupdatesub(
#         message: Message,
#         command: CommandObject
# ):
#     if command.args is None:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
#         )
#         return
#     try:
#         material, material_amount = command.args.split("@")
#         material_amount = int(material_amount)
#     except Exception as e:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
#             "/matupdatesub <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>"
#         )
#         print(e)
#         return
#
#     await message.answer(update_material(conn, material, material_amount, 'subtract'))
#
#
# @dp.message(Command("addexp"))
# async def cmd_addexp(
#         message: Message,
#         command: CommandObject
# ):
#     if command.args is None:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
#         )
#         return
#     try:
#         name, summ, text = command.args.split("@")
#         summ = int(summ)
#     except Exception as e:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
#             "/addexp <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>@<—Å—É–º–º–∞>@<–Ω–∞–∑–≤–∞–Ω–∏–µ>"
#         )
#         print(e)
#         return
#
#     await message.answer(add_expense(conn, name, summ, date.today(), text))
#
#
# @dp.message(Command("getmats"))
# async def cmd_getmats(message: types.Message):
#     text = ''
#     materials = get_all_materials(conn)
#     text += "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n"
#     for material in materials:
#         text += f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {material[0]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {material[1]} –≥—Ä–∞–º–º\n"
#     await message.answer(text)
#
#
# @dp.message(Command("oder"))
# async def cmd_oder(
#         message: Message,
#         command: CommandObject
# ):
#     if command.args is None:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
#         )
#         return
#     try:
#         id = command.args
#         id = int(id)
#     except Exception as e:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
#             "/oder <id>"
#         )
#         print(e)
#         return
#     text = '–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ '
#     for i in get_order_by_id(conn, id):
#         text += str(i) + ' @ '
#     await message.answer(text[:-3])
#
#
# @dp.message(Command("paymenturl"))
# async def cmd_url(
#         message: Message,
#         command: CommandObject
# ):
#     if command.args is None:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
#         )
#         return
#     try:
#         summ = command.args
#         summ = int(summ)
#     except Exception as e:
#         await message.answer(
#             "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
#             "/paymenturl <—Å—É–º–º–∞>"
#         )
#         print(e)
#         return
#     await message.answer(generate_link(summ)[0])

@dp.callback_query(F.data == "back_universal")
async def universal_back(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    
    state_transitions = {
        Ord.link: (Ord.name, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"),
        Ord.material: (Ord.link, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ 3D –º–æ–¥–µ–ª—å"),
        Ord.material_amount: (Ord.material, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"),
        Ord.recommended_date: (Ord.material_amount, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ(–≤ –≥—Ä–∞–º–º–∞—Ö) –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)"),
        Ord.importance: (Ord.recommended_date, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)"),
        Ord.settings: (Ord.importance, "–í–≤–µ–¥–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –æ—Ç 1 –¥–æ 10 (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    }

    if current_state == Ord.name:
        await callback.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
        await callback.message.edit_text(
            '–í–∞—à–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:',
            reply_markup=kb.keyboard_inline1
        )
        await state.clear()
    elif current_state in state_transitions:
        prev_state, message_text = state_transitions[current_state]
        data = await state.get_data()
        await state.set_state(prev_state)
        await state.update_data(**data)
        await callback.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
        await callback.message.edit_text(
            message_text,
            reply_markup=kb.keyboard_inline6
        )
    else:
        await callback.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback.message.edit_text(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ 3D –ø–µ—á–∞—Ç–∏! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
            reply_markup=kb.keyboard_inline_main_menu
        )
        if current_state is not None:
            await state.clear()

@dp.callback_query(F.data == 'menus')
async def make_order(callback: CallbackQuery):
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –º–µ–Ω—é")
    await callback.message.edit_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ 3D –ø–µ—á–∞—Ç–∏! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
        reply_markup=kb.keyboard_inline_main_menu
    )

@dp.callback_query(F.data == 'cancel_order')
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
    await callback.message.delete()
    
    try:
        user_id = callback.from_user.id
        db_manager = DatabaseManager(f'data/db/user{user_id}data.db')
        
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
            excel_path = tmp.name
            has_orders = db_manager.export_pending_orders_to_excel(excel_path)
            db_manager.close_connection()

        if has_orders:
            excel_file = types.FSInputFile(excel_path, filename="–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã.xlsx")
            await callback.message.answer_document(
                document=excel_file,
                caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb.keyboard_inline1
            )
        else:
            await callback.message.answer(
                '–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.',
                reply_markup=kb.keyboard_inline1
            )
        
        os.unlink(excel_path)
            
    except Exception as e:
        print(f"Error in cancel_order: {e}")
        await callback.message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.',
            reply_markup=kb.keyboard_inline1
        )
    
    await state.clear()

@dp.callback_query(F.data == 'order_manage')
async def make_order(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        db_manager = DatabaseManager(f'data/db/user{user_id}data.db')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
            excel_path = tmp.name
            has_orders = db_manager.export_pending_orders_to_excel(excel_path)
            db_manager.close_connection()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()

        if has_orders:
            excel_file = types.FSInputFile(excel_path, filename="–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã.xlsx")
            await callback.message.answer_document(
                document=excel_file,
                caption="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb.keyboard_inline1
            )
        else:
            await callback.message.answer(
                '–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.',
                reply_markup=kb.keyboard_inline1
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(excel_path)
            
    except Exception as e:
        print(f"Error in order_manage: {e}")
        await callback.message.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.',
            reply_markup=kb.keyboard_inline1
        )

@dp.callback_query(F.data == 'back_menu')
async def back_to_menu(callback: CallbackQuery):  # –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –º–µ–Ω—é")
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ 3D –ø–µ—á–∞—Ç–∏! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
            reply_markup=kb.keyboard_inline_main_menu
        )
    except TelegramBadRequest as e:
        if "there is no text in the message to edit" in str(e):
            # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–æ–º
            await callback.message.delete()
            await callback.message.answer(
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ 3D –ø–µ—á–∞—Ç–∏! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
                reply_markup=kb.keyboard_inline_main_menu
            )
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            print(f"Unexpected error in back_to_menu: {e}")

@dp.callback_query(F.data == 'material_manage')
async def make_order(callback: CallbackQuery):
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏")
    await callback.message.edit_text(
        '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –Ω–∞–ª–∏—á–∏–∏:',
        reply_markup=kb.keyboard_inline3
    )

@dp.callback_query(F.data == 'finance_manage')
async def make_order(callback: CallbackQuery):
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏")
    await callback.message.edit_text(
        '–§–∏–Ω–∞–Ω—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:',
        reply_markup=kb.keyboard_inline4
    )
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
