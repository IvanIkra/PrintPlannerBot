import asyncio
import logging
from datetime import date

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command, Message, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery

import keyboards as kb
from config_reader import config
from db_manage import *
from payment import *

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token.get_secret_value())
dp = Dispatcher()
db_file = 'printbot.db'
conn = create_connection(db_file)
create_table(conn)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
create_orders_table(conn)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
create_revenue_table(conn)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Ö–æ–¥–æ–≤
create_expenses_table(conn)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Ö–æ–¥–æ–≤


class Ord(StatesGroup):
    name = State()
    link = State()
    material = State()
    material_amount = State()
    recommended_date = State()
    importance = State()
    settings = State()


class Payment(StatesGroup):
    summ = State()


@dp.message(Command("menu"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Binary Brigade."
        "\n*‚Üì–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é‚Üì*", reply_markup=kb.keyboard_inline2, parse_mode="Markdown")


@dp.message(Command("newoder"))
async def ord_1(message: Message, state: FSMContext):
    await state.set_state(Ord.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞",
                         reply_markup=kb.keyboard_inline6)


@dp.message(Ord.name)
async def ord_2(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Ord.link)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ 3D –º–æ–¥–µ–ª—å",
                         reply_markup=kb.keyboard_inline6)


@dp.message(Ord.link)
async def ord_3(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(Ord.material)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                         reply_markup=kb.keyboard_inline6)


@dp.message(Ord.material)
async def ord_4(message: Message, state: FSMContext):
    await state.update_data(material=message.text)
    await state.set_state(Ord.material_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ(–≤ –≥—Ä–∞–º–º–∞—Ö) –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)",
                         reply_markup=kb.keyboard_inline6)


@dp.message(Ord.material_amount)
async def ord_5(message: Message, state: FSMContext):
    try:
        material_amount = int(message.text)
        await state.update_data(material_amount=material_amount)
        await state.set_state(Ord.recommended_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)",
                             reply_markup=kb.keyboard_inline6)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=kb.keyboard_inline6)


@dp.message(Ord.recommended_date)
async def ord_6(message: Message, state: FSMContext):
    try:
        recommended_date = date.fromisoformat(message.text)
        await state.update_data(recommended_date=recommended_date)
        await state.set_state(Ord.importance)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –æ—Ç 1 –¥–æ 10 (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)",
                             reply_markup=kb.keyboard_inline6)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=kb.keyboard_inline6)


@dp.message(Ord.importance)
async def ord_7(message: Message, state: FSMContext):
    try:
        importance = int(message.text)
        if 1 <= importance <= 10:
            await state.update_data(importance=importance)
            await state.set_state(Ord.settings)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏",
                                 reply_markup=kb.keyboard_inline6)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –≤–∞–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 10. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                 reply_markup=kb.keyboard_inline6)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–∞–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=kb.keyboard_inline6)


@dp.message(Ord.settings)
async def ord_8(message: Message, state: FSMContext):
    await state.update_data(settings=message.text)
    data = await state.get_data()
    await message.answer(
        f'–ò–º—è –∑–∞–∫–∞–∑–∞: {data["name"]}\n'
        f'–°—Å—ã–ª–∫–∞ –Ω–∞ 3D –º–æ–¥–µ–ª—å: {data["link"]}\n'
        f'–ú–∞—Ç–µ—Ä–∏–∞–ª: {data["material"]}\n'
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {data["material_amount"]}\n'
        f'–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {data["recommended_date"]}\n'
        f'–í–∞–∂–Ω–æ—Å—Ç—å: {data["importance"]}\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {data["settings"]}'
        f'\n\n*–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏?*', reply_markup=kb.keyboard_inline5, parse_mode="Markdown")

    @dp.callback_query(F.data == 'no_makeorder')
    async def no_makeorder(callback: CallbackQuery):
        await callback.answer("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        await callback.message.edit_text(f'–ó–∞–∫–∞–∑ *{data["name"]}* –Ω–µ —Å–æ–∑–¥–∞–Ω',
                                         reply_markup=kb.keyboard_inline7, parse_mode="Markdown")

    @dp.callback_query(F.data == 'yes_makeorder')
    async def yes_makeorder(callback: CallbackQuery):
        await callback.answer("–ü—Ä–æ–¥–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        await callback.message.edit_text(f'–ó–∞–∫–∞–∑ *{data["name"]}* –±—ã–ª —Å–æ–∑–¥–∞–Ω, –µ–≥–æ id *<id>*,\
         –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏—Å–≤–æ–∏—Ç—å –µ–º—É —Å—Ç–æ–∏–º–æ—Å—Ç—å *<—Å—Ç–æ–∏–º–æ—Å—Ç—å>* —Ä—É–±',
                                         reply_markup=kb.keyboard_inline8, parse_mode="Markdown")

    @dp.callback_query(F.data == 'our_price_makeorder')
    async def no_makeorder(callback: CallbackQuery):
        await callback.answer("–ì–æ—Ç–æ–≤–æ")
        await callback.message.edit_text(f'–ì–æ—Ç–æ–≤–æ! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é',
                                         reply_markup=kb.keyboard_inline7, parse_mode="Markdown")

    @dp.callback_query(F.data == 'custom_price_makeorder')
    async def no_makeorder(callback: CallbackQuery):
        await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å")
        # –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        await callback.message.edit_text(f'–ì–æ—Ç–æ–≤–æ! –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é',
                                         reply_markup=kb.keyboard_inline7)

    await state.clear()


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("/help - —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
                         "/newoder <–∏–º—è –∑–∞–∫–∞–∑–∞>@<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª>@<–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞\
                         –≤ –≥—Ä–∞–º–º–∞—Ö>@<–¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è>@<—Å—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10>@<–Ω–∞—Å—Ç—Ä–æ–π–∫–∏> - –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
                         "–ü—Ä–∏–º–µ—Ä: /newoder –ó–∞–∫–∞–∑ 1@https://github.com/IvanIkra/PrintPlannerBot@–ü–õ–ê\
                         @100@16-01-2025@10@—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ\n\n"
                         "/matupdateadd <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞> - –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª\n\n"
                         "/matupdatesub <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª\n\n"
                         "/addexp <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>@<—Å—É–º–º–∞>@<–Ω–∞–∑–≤–∞–Ω–∏–µ> - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n\n"
                         "/getmats - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n"
                         "/oder <id> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∫–∑–µ –ø–æ –µ–≥–æ id\n\n"
                         "/paymenturl <—Å—É–º–º–∞> - —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É")


@dp.message(Command("newoder"))
async def cmd_newoder(
        message: Message,
        command: CommandObject
):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    try:
        name, link, matrial, material_amount, recommended_date, importance, settings = command.args.split("@")
        importance = int(importance)
        material_amount = int(material_amount)
        cost = material_amount * 7
    except Exception as e:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "/newoder <–∏–º—è –∑–∞–∫–∞–∑–∞>@<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª>@<–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>\
            @<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è>@<—Å—Ç–µ–ø–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 10>@<–Ω–∞—Å—Ç—Ä–æ–π–∫–∏>"
        )
        print(e)
        return
    mat = update_material(conn, matrial, material_amount, 'subtract')
    if mat == '–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è.':
        await message.answer(mat)
        return
    id = add_order(conn, name, link, matrial, material_amount, recommended_date, importance, settings, cost, True,
                   False, date.today())
    add_revenue(conn, name, material_amount, date.today())

    await message.answer(id + f'\n–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {cost}' + f'\n{mat}')


@dp.message(Command("matupdateadd"))
async def cmd_matupdateadd(
        message: Message,
        command: CommandObject
):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    try:
        material, material_amount = command.args.split("@")
        material_amount = int(material_amount)
    except Exception as e:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "/matupdateadd <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>"
        )
        print(e)
        return

    await message.answer(update_material(conn, material, material_amount, 'add'))


@dp.message(Command("matupdatesub"))
async def cmd_matupdatesub(
        message: Message,
        command: CommandObject
):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    try:
        material, material_amount = command.args.split("@")
        material_amount = int(material_amount)
    except Exception as e:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "/matupdatesub <–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>@<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞>"
        )
        print(e)
        return

    await message.answer(update_material(conn, material, material_amount, 'subtract'))


@dp.message(Command("addexp"))
async def cmd_addexp(
        message: Message,
        command: CommandObject
):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    try:
        name, summ, text = command.args.split("@")
        summ = int(summ)
    except Exception as e:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "/addexp <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>@<—Å—É–º–º–∞>@<–Ω–∞–∑–≤–∞–Ω–∏–µ>"
        )
        print(e)
        return

    await message.answer(add_expense(conn, name, summ, date.today(), text))


@dp.message(Command("getmats"))
async def cmd_getmats(message: types.Message):
    text = ''
    materials = get_all_materials(conn)
    text += "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n"
    for material in materials:
        text += f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {material[0]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {material[1]} –≥—Ä–∞–º–º\n"
    await message.answer(text)


@dp.message(Command("oder"))
async def cmd_oder(
        message: Message,
        command: CommandObject
):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    try:
        id = command.args
        id = int(id)
    except Exception as e:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "/oder <id>"
        )
        print(e)
        return
    text = '–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ '
    for i in get_order_by_id(conn, id):
        text += str(i) + ' @ '
    await message.answer(text[:-3])


@dp.message(Command("paymenturl"))
async def cmd_url(
        message: Message,
        command: CommandObject
):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    try:
        summ = command.args
        summ = int(summ)
    except Exception as e:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "/paymenturl <—Å—É–º–º–∞>"
        )
        print(e)
        return
    await message.answer(generate_link(summ)[0])


@dp.callback_query(F.data == 'make_order')
async def make_order(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    await state.set_state(Ord.name)


@dp.callback_query(F.data == 'menus')
async def make_order(callback: CallbackQuery):
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –º–µ–Ω—é")
    await callback.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ 3D –ø–µ—á–∞—Ç–∏!\
 –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –º–µ–Ω—é.', reply_markup=kb.keyboard_inline_main_menu)


@dp.callback_query(F.data == 'order_manage')
async def make_order(callback: CallbackQuery):
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏")
    await callback.message.edit_text('–í–∞—à–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', reply_markup=kb.keyboard_inline1)


@dp.callback_query(F.data == 'back_menu')
async def make_order(callback: CallbackQuery):
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –º–µ–Ω—é")
    await callback.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –±–æ—Ç–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ 3D –ø–µ—á–∞—Ç–∏!\
 –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –ø—É–Ω–∫—Ç –º–µ–Ω—é.', reply_markup=kb.keyboard_inline_main_menu)


@dp.callback_query(F.data == 'cancel_order_manage')
async def make_order(callback: CallbackQuery):
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏")
    await callback.message.edit_text('–í–∞—à–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:', reply_markup=kb.keyboard_inline1)


@dp.callback_query(F.data == 'material_manage')
async def make_order(callback: CallbackQuery):
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏")
    await callback.message.edit_text('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –Ω–∞–ª–∏—á–∏–∏:', reply_markup=kb.keyboard_inline3)


@dp.callback_query(F.data == 'finance_manage')
async def make_order(callback: CallbackQuery):
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏")
    await callback.message.edit_text('–§–∏–Ω–∞–Ω—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:', reply_markup=kb.keyboard_inline4)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
